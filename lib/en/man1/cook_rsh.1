'\" t
.\"     cook - file construction tool
.\"     Copyright (C) 2001 Endocardial Solutions, Inc
.\"     Copyright (C) 2007 Peter Miller
.\"
.\"     This program is free software; you can redistribute it and/or modify
.\"     it under the terms of the GNU General Public License as published by
.\"     the Free Software Foundation; either version 2 of the License, or
.\"     (at your option) any later version.
.\"
.\"     This program is distributed in the hope that it will be useful,
.\"     but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"     GNU General Public License for more details.
.\"
.\"     You should have received a copy of the GNU General Public License
.\"     along with this program; if not, write to the Free Software
.\"     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
.\"
.\" MANIFEST: manual entry for the cook_rsh command
.\"
.ds n) cook_rsh
.TH \*(n) 1 Cook "Reference Manual"
.so z_name.so
.SH NAME
\*(n) \- load balancing rsh
.XX "cook_rsh(1)" "load balancing rsh"
.SH SYNOPSIS
.B \*(n)
[
.IR option \&...
]
.I architecture
.I command
[
.IR argument \&...
]
.br
.B \*(n)
.B -Help
.SH DESCRIPTION
The \fI\*(n)\fP program is a wrapper around \fIrsh\fP(1) which does
simple load balancing.  It obtains its load information by running
the \fIrup\fP(1) command, and selects the most suitable host hased on
the architecture you specify, and the least load of all hosts of that
architecture.
.PP
The first command line argument is the architecture name which is used
to get the list of possible hosts.  From that list the \fIrup\fP(1)
command is run to determine the host with the lowest load, which is in
turn used as the first argument of the eventual \fIrsh\fP(1) command.
.SH COOKBOOKS
In order to make use of this program, somewhere in your cookbook,
you need to add a line which reads
.RS
.ft CW
parallel_rsh = "\*(n)";
.ft P
.RE
If the host chosen is the same as the caller (build host)
then this program just exec the command skipping the rsh.
So it costs nothing to use this in a one machine network!
.PP
For each recipe you want distributed to a remote host, you need
to add a host-binding attribute to.  Typical usage is where you
have a muti-architecture build.
.RS
.ft CW
%1/%0%.o: %0%.c
    host-binding %1
{
    cc -o [target] -c [resolve %0%.c];
}
.ft P
.RE
In the recipe given here, each architecture has its object files
placed into a separate architecture-specific directory tree.
The architecture name (%1) is used in the host-binding, so
that the compiles may be load-balanced to all machines of that
architecture.
.PP
If you need a command to run on a specific host (say, because
that's where a specific application license resides), then simply
use the host name in the host-binding attribute, rather than an
architecture name.
.SH DEFINING THE CLASSES
The \fI\*(d)/host_lists.pl\fP file is expected to exist, and to contain
variable definitions used to determine if hosts are members of particular
architectures.
.PP
The \fI\*(d)/host_lists.pl\fP file defines a perl HOL "hash of lists"
The hash is \f[CW]%ArchNames\fP and it maps names of architectures as
user want to see them, to list references as the actual lists are stored.
.PP
The names of each architecture could be any form you wish but the
convention is to use the GNUish names such as "sparc-sun-solaris2.8".
.PP
For each architecture, define one or more lists of machines according
to what function each machine set may do.  This can be as simple or as
elaborate as required.  The form of the list variable name can be any
valid perl identifier but may as well be like the architecture name
with dash changed to underbar and dot removed, and the type added.
For example one might define solaris hosts as:
.RS
.ft CW
@sparc_sun_solaris28_hosts = (
   "mickey", "minny", "scrooge" );
.ft P
.RE
And linux hosts as:
.RS
.ft CW
@i386_linux22_hosts = (
   "goofy", "scrooge" );
.ft P
.RE
.PP
If there is a need to define different sets of machines for different types
of jobs then add a suffix to the names in the \fI host-binding\fP directive
on each of the recipes, and lists here with the same suffix.
.PP
The hash to map argument names to lists is defined like:
.RS
.ft CW
%ArchNames = (
  "sparc-solaris2.8",     => \@sparc_solaris28_hosts,
  "i586-unknown-linux22", => \@i386_linux22_hosts,
);
.ft P
.RE
.PP
Of course if users have differing opinions as to what the architecture
names should look like, you can define "alias" mappings as well.
.RS
.ft CW
  "sun4-SunOS-5.8",       => \@sparc_solaris28_hosts,
.ft P
.RE
Or maybe the level is of no importance, then define
.RS
.ft CW
  "sparc-solaris",        => \@sparc_solaris28_hosts,
  "sparc-solaris2.7",     => \@sparc_solaris28_hosts,
.ft P
.RE
Also, this list isn't allowed to be empty.
.LP
And finally, curtesy of Perl, the last line of the file must read
.RS
.ft CW
1;
.ft P
for obscure and magical reasons.
.RE
.SH SYSLOG LOGGING
Typical commands seen during a build would look like
.RS
sh -c 'cd /aegis/dd/gumby2.2.C079 && \e
sh -ce /aegis/dd/gumby2.2.C079/.6.1; \e
echo $? > /aegis/dd/gumby2.2.C079/.6.2'
.RE
So we can extract the project/ change from the command quite
easily and logging it via syslog would be a trivial addition.
.SH OPTIONS
This command is not usually given any options.
.TP 8n
\fB\-h\fP
Help - show usage info
.TP 8n
\fB\-v\P
Verbose - report choice
.TP 8n
\fB\-T\fP\fIn\fP
Trace value for testing
.SH FILES
.TP 8n
\*(d)/exclude.hosts
This file is used to list those host which must not be
used by this script.  Simply list excuded hosts, one
hostname per line.  If the file is absent, all hosts
reported by rup(1) may be used.
.TP 8n
\*(d)/host_lists.pl
This file defines the classes of hosts for each architecture.
.SH AUTHOR
Jerry Pendergraft <jerry@endocardial.com>
