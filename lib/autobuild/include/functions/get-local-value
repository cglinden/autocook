/*  cook files look like -*- C++ -*-
 *
 *  Autodiscovering Build System
 *  Copyright (C) 1997 - 2002 CG Software Design LLC
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Please send bug reports to bugs@cg-soft.com
 */

/* This is how the localization scheme for variables currently 
 * works:
 *
 *   o The localizeable variables are defined in the
 *     make/cook/include/defs/... files by appending their
 *     names either to cumulative_parameters or to
 *     once_only_paramaters. As the name indicates,
 *     a cumulative_parameter will accumulate all values
 *     defined unless explicitely reset (e.g. -I compiler flags),
 *     whereas once_only paramters always get reset.
 *
 *   o The local Howto.cook files get preprocessed, and
 *     assignments to regitered parameters get transformed
 *     into valid cook statements:
 *        += ADD   accumulate
 *        -= SUB   subtract
 *        := RESET reset
 *     The actual content of the string contains the operation,
 *     followed by the location of the operation, followed by
 *     the content to add, subtract or assign.
 *
 *   o The other thing the preprocessing of the local Howto.cook
 *     file does is to append the directory path to the variable
 *     name.
 *
 * The functions defined in this file resolve a variable reference
 * by accumulating all the variables defined with the specified
 * basename, in top down order, and then evaluating the ADD/SUB/RESET
 * operations.
 *
 * The intended order of evaluation is "most general" to
 * "most specific", where the variant/platform overrides
 * directory location. If a setting needs to propagate at
 * all costs, it may be necessary to specify it explicitely
 * for all platform variant combos. Unfortunately, any 
 * decision how to traverse this multi-dimensional space is
 * going to be arbitrary, and this one seems to be the least
 * annoying.
 */

/*--- return inherited value of a localized variable -----------*/

function get-local-value /* basename, dir */ =
{
  if [defined [@1]_[@2]] then {
    return [[@1]_[@2]];
  }
  if [defined do_not_propagate_parameters] then {
    if [in [@1] [do_not_propagate_parameters]] then {
      return [defined-or-null [@1]];
    }
  }
  if [match_mask %0%/%1/ [@2]] then {
    return [get-local-value [@1] [dir [dir [@2]]]/];
  } else {
    return [defined-or-null [@1]];
  }
}

function get-variant-value /* basename, variant, dir */ =
{
  local local_value = [get-local-value [@1]_[@2] [@3]];
  if [count [local_value]] then if [in [@1] [once_only_parameters]] then {
    return [local_value];
  }
  return [get-local-value [@1] [@3]] [local_value];
}

function get-platform-value /* basename, variant, dir */ =
{
  local variant_value = [get-variant-value [@1]_[unix] [@2] [@3]];
  if [count [variant_value]] then if [in [@1] [once_only_parameters]] then {
    return [variant_value];
  }
  return [get-variant-value [@1] [@2] [@3]] [variant_value];
}

function get /* basename, variant, dir */ =
{
  return [combine [get-platform-value [arg]]];
}

function debug-get /* basename, variant, dir */ =
{
  return [combine [debug-get-platform-value [arg]]];
}

function trace /* basename, variant, dir */ =
{
  return "# "[@1]" ="[trace-combination [get-platform-value [arg]]];
}

/* The debug-xxx variants can be used to track down the traversal
 * of all the definitions. Now that the trace function is available,
 * it shouldn't really be necessary
 */

/*--- return inherited value of a localized variable -----------*/
function debug-get-local-value /* basename, dir */ =
{
  [print debug-get-local-value [arg]];
  if [defined [@1]_[@2]] then {
    [print get-local-value uses [@1]_[@2] \= [[@1]_[@2]]];
    return [[@1]_[@2]];
  }
  if [defined do_not_propagate_parameters] then {
    if [in [@1] [do_not_propagate_parameters]] then {
      [print get-local-value uses do_not_propagate [@1] \= [defined-or-null [@1]]];
      return [defined-or-null [@1]];
    }
  }
  if [match_mask %0%/%1/ [@2]] then {
    return [debug-get-local-value [@1] [dir [dir [@2]]]/];
  } else {
    [print get-local-value uses [@1] \= [defined-or-null [@1]]];
    return [defined-or-null [@1]];
  }
}

function debug-get-variant-value /* basename, variant, dir */ =
{
  [print debug-get-variant-value [arg]];
  local local_value = [debug-get-local-value [@1]_[@2] [@3]];
  if [count [local_value]] then if [in [@1] [once_only_parameters]] then {
    [print get-variant-value returns [local_value]];
    return [local_value];
  }
  return [debug-get-local-value [@1] [@3]] [local_value];
}

function debug-get-platform-value /* basename, variant, dir */ =
{
  [print debug-get-platform-value [arg]];
  local variant_value = [debug-get-variant-value [@1]_[unix] [@2] [@3]];
  if [count [variant_value]] then if [in [@1] [once_only_parameters]] then {
    [print get-platform-value returns [variant_value]];
    return [variant_value];
  }
  return [debug-get-variant-value [@1] [@2] [@3]] [variant_value];
}
