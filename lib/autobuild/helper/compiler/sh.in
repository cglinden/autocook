#!@PERL@

use IO::File;

my $script = undef;
my %inc = ();
my %use = ();
my %def = (PERL => '/usr/bin/atperl');

while (my $arg = shift) {
  $arg =~ s/\s+/ /gs;
  if ($arg eq '-I') {
    $inc{shift} = 1;
  } elsif ($arg =~ /^-I(.*)/) {
    $inc{$1} = 1;
  } elsif ($arg =~ /^-D([^=]*)=(.*)/) {
    $def{$1} = $2;
  } elsif (defined($script)) {
    $use{$arg} = 1 unless $arg eq $script;
  } else {
    $script = $arg;
  }
}

my @inc = keys(%inc);

die("No source specified\n") unless defined($script);
die("File not found: $script\n") unless -r $script;

# Explore files to figure out in which order to concatenate them.
# Some code relies on initializers being run in the proper order.
my @use = ();
my %explored = ();
print "#!/bin/sh\n";
explore_file($script);

print "# -eof-  generated code, do not edit\n";

sub explore_file {
  my $file = shift;
  my $fh = new IO::File;

  $fh->open($file) || die("Failed to open $file: $!\n");

  print "# 1 \"$file\"\n";
  my $linenr = 0;
  while (my $line = <$fh>) {
    $linenr++;
    while (my($key,$val) = each(%def)) {
      $line =~ s/\%$key\%/$val/g;
    }
    if ($line =~ /^\s*\#\s*include\s+\"([^\s\"]+)\"/) {
      # recursively explore "include" statements
      if (defined(my $found = resolve_file($1))) {
	explore_file($found);
        print "# $linenr \"$file\"\n";
      } else {
        print $line;
      }
    } else {
      print $line;
    }
  }
  print "#----- end of $file\n";
  $fh->close();
}

sub resolve_file {
  my $use = shift;

  my $found = undef;
  for my $i (@inc) {
    if (-r "$i/$use") {
      return "$i/$use";
    }
  }
  return undef;
}
